{"version":3,"sources":["drawButton.jsx","config.js","drawHeaders.jsx","drawInput.jsx","drawCell.jsx","drawRow.jsx","helpers.js","App.jsx","serviceWorker.js","demo.js","index.js"],"names":["DrawButton","SaveButton","styled","button","_templateObject","_this$props","this","props","onClick","value","react_default","a","createElement","React","Component","DefaultData","id","Data","category","price","qty","name","Header","th","drawHeaders_templateObject","headersList","map","index","key","DrawHeaders","Input","input","drawInput_templateObject","BgColor","DrawInput","handleInputEvent","event","_this","handleCellDataChangeEvent","type","onChange","disabled","DrawCell","drawInput_DrawInput","DrawRow","handleRowDelEvent","row","handleDataChange","_this2","react","Object","getOwnPropertyNames","drawCell_DrawCell","drawButton_DrawButton","getItemTemplate","dataArray","itemTemplate","length","Array","isArray","originItem","objectSpread","defineProperty","generateId","Math","floor","random","TableWrapper","div","App_templateObject","TableHeadRow","tr","_templateObject2","Warning","_templateObject3","TableHead","thead","_templateObject4","ItemsTable","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleAddRowEvent","state","touched","addRowEvent","console","log","newData","data","newItem","newId","newRow","push","setState","item","parseInt","target","items","slice","forEach","i","edited","cellChangeEvent","handleSave","saveEvent","delEvent","indexOf","splice","tableData","drawHeaders_DrawHeaders","drawRow_DrawRow","bind","style","display","Boolean","window","location","hostname","match","Demo","handleAddEvent","ms","Promise","resolve","setTimeout","then","handleCellChangeEvent","handleSaveEvent","dataToSave","assertThisInitialized","TableData","App","ReactDOM","render","demo_Demo","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"muBAEqBA,mLAGjB,IAAMC,EAAaC,IAAOC,OAAVC,KAFTC,EAoBoBC,KAAKC,MAAxBC,EApBDH,EAoBCG,QAASC,EApBVJ,EAoBUI,MAEf,OAAOC,EAAAC,EAAAC,cAACX,EAAD,CAAYO,QAASA,GAAWC,UAvBLI,IAAMC,WCDjCC,EAAc,CAAC,CAC3BC,GAAI,YAEQC,EAAO,CACnB,CACCD,GAAI,EACJE,SAAU,iBACVC,MAAO,QACPC,IAAK,KACLC,KAAM,YAEP,CACCL,GAAI,EACJE,SAAU,iBACVC,MAAO,OACPC,IAAK,KACLC,KAAM,YAEP,CACCL,GAAI,EACJE,SAAU,iBACVC,MAAO,QACPC,IAAK,KACLC,KAAM,cAGP,CACCL,GAAI,EACJE,SAAU,cACVC,MAAO,QACPC,IAAK,KACLC,KAAM,cAEP,CACCL,GAAI,EACJE,SAAU,cACVC,MAAO,SACPC,IAAK,KACLC,KAAM,YAEP,CACCL,GAAI,EACJE,SAAU,cACVC,MAAO,SACPC,IAAK,KACLC,KAAM,sGCxCR,IAAMC,EAASpB,IAAOqB,GAAVC,KAINC,EDViB,CAAC,KAAO,WAAY,QAAS,MAAO,QCU/BC,IAAI,SAACL,EAAMM,GAAP,OAAiBjB,EAAAC,EAAAC,cAACU,EAAD,CAAQM,IAAKD,GAAQN,KAEjDQ,mLAEnB,OAAOJ,SAFgCZ,IAAMC,wOCR/C,IAAMgB,EAAQ5B,IAAO6B,MAAVC,IAMI,SAAAzB,GAAK,OAAKA,EAAM0B,QAAU1B,EAAM0B,QAAU,UAKpCC,6MACnBC,iBAAmB,SAAAC,GACjBC,EAAK9B,MAAM+B,0BAA0BF,4EAE9B,IAAA/B,EAEoCC,KAAKC,MAAxCS,EAFDX,EAECW,GAAIK,EAFLhB,EAEKgB,KAAMkB,EAFXlC,EAEWkC,KAAM9B,EAFjBJ,EAEiBI,MAAOwB,EAFxB5B,EAEwB4B,QAE/B,OACEvB,EAAAC,EAAAC,cAACkB,EAAD,CACES,KAAMA,EACNvB,GAAIA,EACJK,KAAMA,EACNZ,MAAOA,EACP+B,SAAUlC,KAAK6B,iBAEfM,SAAmB,OAATpB,EAAe,WAAa,KAC5CY,QAASA,WAjB4BpB,IAAMC,WCZxB4B,mLACV,IAAArC,EAIuDC,KAAKC,MAA5D+B,EAJAjC,EAIAiC,0BAA2BtB,EAJ3BX,EAI2BW,GAAIK,EAJ/BhB,EAI+BgB,KAAMZ,EAJrCJ,EAIqCI,MAAOwB,EAJ5C5B,EAI4C4B,QACnD,OACEvB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAC+B,EAAD,CACEJ,KAAM,OACNvB,GAAIA,EACJK,KAAMA,EACNZ,MAAOA,EACb6B,0BAA2BA,EAC3BL,QAASA,YAdyBpB,IAAMC,WCEvB8B,6MACpBC,kBAAoB,WACnBR,EAAK9B,MAAMsC,kBAAkBR,EAAK9B,MAAMuC,QAIzCC,iBAAmB,SAAAX,GAClBC,EAAK9B,MAAM+B,0BAA0BF,4EAE7B,IAAAY,EAAA1C,KACFwC,EAAMxC,KAAKC,MAAMuC,IACjBb,EAAU3B,KAAKC,MAAM0B,QAE3B,OACCvB,EAAAC,EAAAC,cAACqC,EAAA,SAAD,KACCvC,EAAAC,EAAAC,cAAA,UACEsC,OAAOC,oBAAoBL,GAAKpB,IAAI,SAACE,EAAKD,GAAN,OACpCjB,EAAAC,EAAAC,cAACwC,EAAD,CACCpC,GAAI8B,EAAI9B,GACRK,KAAMO,EACNnB,MAAOqC,EAAIlB,GACXA,IAAKD,EACLW,0BAA2BU,EAAKD,iBAChCd,QAASA,MAGXvB,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAACyC,EAAD,CAAY7C,QAASF,KAAKuC,kBAAmBpC,MAAM,gBA3BpBI,IAAMC,mBCFpC,SAASwC,EAAgBC,GAE9B,IAAIC,EAAe,GACnB,GAAID,EAAUE,OAAS,GAAKC,MAAMC,QAAQJ,GAAY,CACrD,IAAMK,EAAaL,EAAU,GAE7B,IAAK,IAAI3B,KAAOgC,EACfJ,EAAYN,OAAAW,EAAA,EAAAX,CAAA,GACRM,EADQN,OAAAY,EAAA,EAAAZ,CAAA,GAEVtB,EAAM,KAIV,OAAO4B,EAKF,SAASO,IACf,OAAOC,KAAKC,MAAsB,OAAhBD,KAAKE,6eCZxB,IAAMC,EAAejE,IAAOkE,IAAVC,IACA,SAAA9D,GAAK,OAAKA,EAAM0B,QAAU1B,EAAM0B,QAAU,UAMtDqC,EAAepE,IAAOqE,GAAVC,KAIZC,EAAUvE,IAAOkE,IAAVM,KAIPC,EAAYzE,IAAO0E,MAAVC,KAsIAC,cAhIb,SAAAA,EAAYvE,GAAO,IAAA8B,EAAA,OAAAa,OAAA6B,EAAA,EAAA7B,CAAA5C,KAAAwE,IACjBzC,EAAAa,OAAA8B,EAAA,EAAA9B,CAAA5C,KAAA4C,OAAA+B,EAAA,EAAA/B,CAAA4B,GAAAI,KAAA5E,KAAMC,KAQR4E,kBAAoB,WAClB,IAAK9C,EAAK+C,MAAMC,SAAWhD,EAAK9B,MAAM+E,YAEpCjD,EAAK9B,MAAM+E,mBACN,GAAKjD,EAAK+C,MAAMC,QAWhBE,QAAQC,IAAI,iBAXa,CAClC,IAAIC,EAAUpD,EAAK+C,MAAMM,KAChBC,EAAUrC,EAAgBjB,EAAK+C,MAAMM,MAC1CE,EAAQ7B,IACR8B,EAAM3C,OAAAW,EAAA,EAAAX,CAAA,GACFyC,EADE,CAEL3E,GAAI4E,IAENvD,EAAK+C,MAAMM,KAAKI,KAAKD,GAExBxD,EAAK0D,SAAS,CAAEL,KAAMD,MAvBHpD,EA4CnBC,0BAA4B,SAAAF,GAE1B,IAAI4D,EAAO,CACThF,GAAIiF,SAAS7D,EAAM8D,OAAOlF,IAC1BK,KAAMe,EAAM8D,OAAO7E,KACnBZ,MAAO2B,EAAM8D,OAAOzF,OAElB0F,EAAQ9D,EAAK+C,MAAMM,KAAKU,QAE5BD,EAAME,QAAQ,SAAAC,GACZ,IAAK,IAAI1E,KAAO0E,EACV1E,IAAQoE,EAAK3E,MAAQiF,EAAEtF,KAAOgF,EAAKhF,KACrCsF,EAAE1E,GAAOoE,EAAKvF,SAKpB4B,EAAK0D,SAAS,CAAEQ,OAAQJ,IAEnB9D,EAAK+C,MAAMC,SAClBhD,EAAK0D,SAAS,CAACV,SAAS,IAErBhD,EAAK9B,MAAMiG,iBACdnE,EAAK9B,MAAMiG,gBAAgBnE,EAAK+C,MAAMC,UAnEnBhD,EAsEnBoE,WAAa,WAGZpE,EAAK0D,SAAS,CAACL,KAAOrD,EAAK+C,MAAMmB,SACjClE,EAAK0D,SAAS,CAACV,SAAS,IACpBhD,EAAK9B,MAAMmG,WACdrE,EAAK9B,MAAMmG,UAAUrE,EAAK+C,MAAMmB,SAzEhClE,EAAK+C,MAAQ,GAEb/C,EAAK+C,MAAMM,KAAOrD,EAAK9B,MAAMmF,KAC7BrD,EAAK+C,MAAMC,QAAUhD,EAAK9B,MAAM8E,QANfhD,iFA2BD2D,GAGjB,IAAK1F,KAAK8E,MAAMC,SAAW/E,KAAKC,MAAMoG,SACrCrG,KAAKC,MAAMoG,SAASX,QACd,IAAK1F,KAAK8E,MAAMC,QAAS,CAC/B,IAAII,EAAUnF,KAAK8E,MAAMM,KACzBH,QAAQC,IAAIC,GACZ,IAAM9D,EAAQrB,KAAK8E,MAAMM,KAAKkB,QAAQZ,GAErCP,EAAWnF,KAAK8E,MAAMM,KAAKmB,OAAOlF,EAAO,GAE1C4D,QAAQC,IAAIC,GAEZnF,KAAKyF,SAAS,CAACL,KAAMpF,KAAK8E,MAAMM,yCAwCzB,IAAA1C,EAAA1C,KAEDwG,EAAYxG,KAAK8E,MAAMM,KAAOpF,KAAK8E,MAAMM,KAAO3E,EAChDsE,EAAU/E,KAAK8E,MAAMC,QACrBpD,EAAU3B,KAAKC,MAAM0B,QAE3B,OADAsD,QAAQC,IAAIlF,KAAK8E,OAEf1E,EAAAC,EAAAC,cAACqC,EAAA,SAAD,KACEvC,EAAAC,EAAAC,cAACuD,EAAD,CAAclC,QAASA,GACrBvB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAC+D,EAAD,KACEjE,EAAAC,EAAAC,cAAC0D,EAAD,KACE5D,EAAAC,EAAAC,cAACmG,EAAD,QAIJrG,EAAAC,EAAAC,cAAA,aACGkG,EAAUpF,IAAI,SAACsE,EAAMrE,GAAP,OACbjB,EAAAC,EAAAC,cAACoG,EAAD,CACElE,IAAKkD,EACLpE,IAAKD,EACLkB,kBAAmBG,EAAKH,kBAAkBoE,KAAKjE,GAC/CV,0BAA2BU,EAAKV,0BAA0B2E,KAAKjE,GAC3Ef,QAASA,QAMLvB,EAAAC,EAAAC,cAACyC,EAAD,CACE7C,QAASF,KAAK6E,kBAAkB8B,KAAK3G,MACrCG,MAAM,YAERC,EAAAC,EAAAC,cAAC6D,EAAD,CACEyC,MAAO,CACLC,QAAS9B,EAAU,aAAe,SAFtC,2EAME3E,EAAAC,EAAAC,cAACyC,EAAD,CAAY7C,QAASF,KAAKmG,WAAYhG,MAAM,mBAzH9BK,aClBNsG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECbeC,cACnB,SAAAA,EAAYlH,GAAO,IAAA8B,EAAA,OAAAa,OAAA6B,EAAA,EAAA7B,CAAA5C,KAAAmH,IACjBpF,EAAAa,OAAA8B,EAAA,EAAA9B,CAAA5C,KAAA4C,OAAA+B,EAAA,EAAA/B,CAAAuE,GAAAvC,KAAA5E,KAAMC,KASRmH,eAAiB,WACf,IAAI/B,EAASC,EAAOC,EAGI8B,EAFpBlC,EAAUpD,EAAK+C,MAAMM,MAEDiC,EAeS,IAdtB,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTnC,EAAUrC,EAAgBrC,GAC1B2E,EAAQ7B,IACR8B,EAAM3C,OAAAW,EAAA,EAAAX,CAAA,GACDyC,EADC,CAEJ3E,GAAI4E,IAENH,EAAQK,KAAKD,GACbgC,EAAQ,QACPF,MAKEI,KAAK,WAKZxC,QAAQC,IAAIC,GACZpD,EAAK0D,SAAS,CAAEL,KAAMD,OApCTpD,EA2CnBQ,kBAAoB,SAAAmD,GAClB,IAAMrE,EAAQU,EAAK+C,MAAMM,KAAKkB,QAAQZ,GAClCP,EAAUpD,EAAK+C,MAAMM,KAAKmB,SAC9BtB,QAAQC,IAAIC,EAAS9D,GAEnB,IAAsBgG,KAUS,IATtB,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTrC,EAAUA,EAAQoB,OAAOlF,EAAO,GACvC4D,QAAQC,IAAIC,EAAS9D,GACdkG,EAAQ,QACPF,MAKEI,KAAK,WACZ1F,EAAK+C,MAAMM,KAAKmB,OAAOlF,EAAO,GAC9BU,EAAK0D,SAASN,MA7DDpD,EAoEnB2F,sBAAwB,SAAC3C,KApENhD,EAwEnB4F,gBAAkB,SAAAC,GAChB,IAAuBP,KAQS,IAPvB,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTD,EAAQ,QACPF,MAMJI,KAAK,WACJ1F,EAAK0D,SAAS,CAAEL,KAAMwC,MAEvBH,KAAK,WACJ1F,EAAK0D,SAAS,CAAEV,SAAS,OApF7BhD,EAAK+C,MAAQ,GAEb/C,EAAK+C,MAAMM,KAAOzE,EAClBoB,EAAK+C,MAAMC,SAAU,EACrBhD,EAAKqF,eAAiBrF,EAAKqF,eAAeT,KAApB/D,OAAAiF,EAAA,EAAAjF,QAAAiF,EAAA,EAAAjF,CAAAb,KAPLA,wEA4FjB,IAAM+F,EAAY9H,KAAK8E,MAAMM,KACvBL,EAAU/E,KAAK8E,MAAMC,QAE3B,OADAE,QAAQC,IAAIlF,KAAK8E,OAEf1E,EAAAC,EAAAC,cAACyH,EAAD,CACE3C,KAAM0C,EAKN/C,QAASA,EACfpD,QAAS,mBAxGuBpB,IAAMC,WCMxCwH,IAASC,OAAO7H,EAAAC,EAAAC,cAAC4H,EAAD,MAASC,SAASC,eAAe,SFkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,KAAK,SAAAe,GACjCA,EAAaC","file":"static/js/main.9448073a.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nexport default class DrawButton extends React.Component {\r\n  render() {\r\n\r\n    const SaveButton = styled.button`\r\n   \r\n      \r\n    \r\n  display: inline-block;\r\n  font-size: 100%;\r\n  font-weight: 700;\r\n  color: #fff;\r\n  text-shadow: #053852 -1px 1px, #053852 1px 1px, #053852 1px -1px, #053852 -1px -1px;\r\n  text-decoration: none;\r\n  user-select: none;\r\n  padding: 5px;\r\n  \r\n  background: #053852 repeating-linear-gradient(135deg, #053852, #053852 10px, #1679ad 10px, #1679ad 20px, #053852 20px);\r\n  cursor: pointer;\r\n  \r\n    `;\r\n\r\n    const { onClick, value } = this.props;\r\n\r\n      return <SaveButton onClick={onClick} >{value}</SaveButton>;\r\n  }\r\n}\r\n","export const Headers = ['ID',  'category', 'price', 'qty', 'Name'];\r\nexport const DefaultData = [{\r\n\tid: 'no data'\r\n}]\r\nexport const Data = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tcategory: 'Sporting Goods',\r\n\t\tprice: '49.99',\r\n\t\tqty: '12',\r\n\t\tname: 'football',\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\tcategory: 'Sporting Goods',\r\n\t\tprice: '9.99',\r\n\t\tqty: '15',\r\n\t\tname: 'baseball',\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\tcategory: 'Sporting Goods',\r\n\t\tprice: '29.99',\r\n\t\tqty: '14',\r\n\t\tname: 'basketball'\r\n\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\tcategory: 'Electronics',\r\n\t\tprice: '99.99',\r\n\t\tqty: '34',\r\n\t\tname: 'iPod Touch',\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\tcategory: 'Electronics',\r\n\t\tprice: '399.99',\r\n\t\tqty: '12',\r\n\t\tname: 'iPhone 5',\r\n\t},\r\n\t{\r\n\t\tid: 6,\r\n\t\tcategory: 'Electronics',\r\n\t\tprice: '199.99',\r\n\t\tqty: '23',\r\n\t\tname: 'nexus 7',\r\n\t},\r\n];\r\n","//Headers\r\nimport {Headers} from \"./config\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Header = styled.th`\r\nborder: 1px solid\r\n`\r\n\r\nconst headersList = Headers.map((name, index) => <Header key={index}>{name}</Header>);\r\n\r\nexport default class DrawHeaders extends React.Component {\r\n\trender() {\r\n\t\treturn headersList;\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst Input = styled.input`\r\nborder: none transparent;\r\noutline: none;\r\nfont-size: 13px;\r\n\tpadding: 6px 0 4px 10px;\r\n\tborder-bottom: 1px solid #cecece;\r\n\tbackground: ${props => (props.BgColor ? props.BgColor : 'white')};\r\n\t\r\n`;\r\n\r\n\r\nexport default class DrawInput extends React.Component {\r\n  handleInputEvent = event => {\r\n    this.props.handleCellDataChangeEvent(event);\r\n  };\r\n  render() {\r\n\r\n    const { id, name, type, value, BgColor } = this.props;\r\n\r\n    return (\r\n      <Input\r\n        type={type}\r\n        id={id}\r\n        name={name}\r\n        value={value}\r\n        onChange={this.handleInputEvent}\r\n        // readOnly={name === 'id'? \"readonly\" : null }\r\n        disabled={name === 'id'? \"readonly\" : null }\r\n\t\tBgColor={BgColor}\r\n\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport DrawInput from './drawInput';\r\n\r\nexport default class DrawCell extends React.Component {\r\n  render() {\r\n\r\n\r\n\r\n    const {handleCellDataChangeEvent, id, name, value, BgColor} = this.props;\r\n    return (\r\n      <td>\r\n        <DrawInput\r\n          type={'text'}\r\n          id={id}\r\n          name={name}\r\n          value={value}\r\n\t\t  handleCellDataChangeEvent={handleCellDataChangeEvent}\r\n\t\t  BgColor={BgColor}\r\n        />\r\n      </td>\r\n    );\r\n  }\r\n}\r\n","import React, {Fragment} from \"react\";\r\nimport DrawCell from \"./drawCell\";\r\nimport DrawButton from \"./drawButton\";\r\n\r\n\r\nexport default class DrawRow extends React.Component {\r\n\thandleRowDelEvent = () => {\r\n\t\tthis.props.handleRowDelEvent(this.props.row);\r\n\r\n\t};\r\n\r\n\thandleDataChange = event => {\r\n\t\tthis.props.handleCellDataChangeEvent(event);\r\n\t};\r\n\trender() {\r\n\t\tconst row = this.props.row;\r\n\t\tconst BgColor = this.props.BgColor\r\n\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t{Object.getOwnPropertyNames(row).map((key, index) => (\r\n\t\t\t\t\t\t<DrawCell\r\n\t\t\t\t\t\t\tid={row.id}\r\n\t\t\t\t\t\t\tname={key}\r\n\t\t\t\t\t\t\tvalue={row[key]}\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\thandleCellDataChangeEvent={this.handleDataChange}\r\n\t\t\t\t\t\t\tBgColor={BgColor}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<DrawButton onClick={this.handleRowDelEvent} value=\"X\" />\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n","import {Data} from \"./config\";\r\n\r\n\r\nexport function getItemTemplate(dataArray) {\r\n\r\n\t let itemTemplate = {};\r\n\t if (dataArray.length > 0 && Array.isArray(dataArray)) {\r\n\t\t const originItem = dataArray[0];\r\n\r\n\t\t for (let key in originItem) {\r\n\t\t\t itemTemplate = {\r\n\t\t\t\t ...itemTemplate,\r\n\t\t\t\t [key]: '',\r\n\t\t\t };\r\n\t\t }\r\n\t }\r\n\t return itemTemplate\r\n}\r\n\r\n\r\n\r\nexport function generateId() {\r\n\treturn Math.floor(Math.random() * 999999);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component, Fragment } from 'react';\n\nimport DrawButton from './drawButton';\nimport DrawHeaders from './drawHeaders';\nimport DrawRow from './drawRow';\nimport { generateId, getItemTemplate } from './helpers';\nimport { Data, DefaultData } from './config';\nimport styled from 'styled-components';\n\n\nconst TableWrapper = styled.div`\n    background: ${props => (props.BgColor ? props.BgColor : 'white')};\n    border: 1px solid\n    text-align: -webkit-center;\n    padding: 20px;\n    `\n\nconst TableHeadRow = styled.tr`\n     \n     \n    `;\nconst Warning = styled.div`\n      color: red;\n    `;\n\nconst TableHead = styled.thead`\n    background: papayawhip;\n    border: 1px solid\n    `;\n\n class ItemsTable extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n\n    this.state.data = this.props.data;\n    this.state.touched = this.props.touched;\n  }\n\n  handleAddRowEvent = () => {\n    if (!this.state.touched && this.props.addRowEvent) {\n\n      this.props.addRowEvent();\n    } else if (!this.state.touched) {\n\t\tlet newData = this.state.data;\n    \tconst newItem = getItemTemplate(this.state.data),\n    \t\tnewId = generateId(),\n    \t\tnewRow = {\n    \t\t\t...newItem,\n    \t\t\tid: newId,\n    \t\t};\n    \tthis.state.data.push(newRow);\n    \t// this.setState(this.state.data);\n\t\tthis.setState({ data: newData });\n    } else console.log('need save');\n  };\n\n  handleRowDelEvent(item) {\n\n\n\t  if (!this.state.touched && this.props.delEvent) {\n\t\t  this.props.delEvent(item);\n\t  } else if (!this.state.touched) {\n\t\t  let newData = this.state.data;\n\t\t  console.log(newData)\n\t\t  const index = this.state.data.indexOf(item);\n\n\t\t   newData =  this.state.data.splice(index, 1);\n\t\t  // this.state.data.splice(index, 1)\n\t\t  console.log(newData)\n\t\t  // this.state.data.splice(index, 1);\n\t\t  this.setState({data: this.state.data});\n\t  }\n  }\n  handleCellDataChangeEvent = event => {\n\n    let item = {\n      id: parseInt(event.target.id),\n      name: event.target.name,\n      value: event.target.value,\n    };\n    let items = this.state.data.slice();\n\n    items.forEach(i => {\n      for (let key in i) {\n        if (key === item.name && i.id === item.id) {\n          i[key] = item.value;\n        }\n      }\n    });\n\n    this.setState({ edited: items });\n\n    if (!this.state.touched) {\n\t\tthis.setState({touched: true});\n\t}\n\tif (this.props.cellChangeEvent) {\n\t\tthis.props.cellChangeEvent(this.state.touched)\n\t}\n  };\n  handleSave = () => {\n\n\n\t  this.setState({data : this.state.edited});\n\t  this.setState({touched: false});\n\t  if (this.props.saveEvent) {\n\t\t  this.props.saveEvent(this.state.edited);\n\n\t  }\n\n  };\n  render() {\n\n    const tableData = this.state.data ? this.state.data : DefaultData;\n    const touched = this.state.touched;\n\t  const  BgColor = this.props.BgColor;\n    console.log(this.state)\n    return (\n      <Fragment>\n        <TableWrapper BgColor={BgColor}>\n          <table>\n            <TableHead>\n              <TableHeadRow>\n                <DrawHeaders />\n              </TableHeadRow>\n            </TableHead>\n\n            <tbody>\n              {tableData.map((item, index) => (\n                <DrawRow\n                  row={item}\n                  key={index}\n                  handleRowDelEvent={this.handleRowDelEvent.bind(this)}\n                  handleCellDataChangeEvent={this.handleCellDataChangeEvent.bind(this)}\n\t\t\t\t  BgColor={BgColor}\n                />\n              ))}\n            </tbody>\n          </table>\n\n          <DrawButton\n            onClick={this.handleAddRowEvent.bind(this)}\n            value=\"ADD ROW\"\n          />\n          <Warning\n            style={{\n              display: touched ? 'table-cell' : 'none',\n            }}\n          >\n            Unsaved data in cells. Please save progress before adding/removing rows!\n            <DrawButton onClick={this.handleSave} value=\"SAVE\" />\n          </Warning>\n        </TableWrapper>\n      </Fragment>\n    );\n  }\n}\n\nexport default ItemsTable;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ItemsTable from './App';\r\nimport { Data } from './config';\r\nimport { generateId, getItemTemplate } from './helpers';\r\n\r\nexport default class Demo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n    this.state.data = Data;\r\n    this.state.touched = false;\r\n    this.handleAddEvent = this.handleAddEvent.bind(this);\r\n  }\r\n\r\n  handleAddEvent = () => {\r\n    let newItem, newId, newRow;\r\n    let newData = this.state.data;\r\n    // if (!this.state.touched) {\r\n      const ServerAddCall = ms => {\r\n        return new Promise(resolve => {\r\n          setTimeout(() => {\r\n            newItem = getItemTemplate(Data);\r\n            newId = generateId();\r\n            newRow = {\r\n              ...newItem,\r\n              id: newId,\r\n            };\r\n            newData.push(newRow);\r\n            resolve('200');\r\n          }, ms);\r\n        });\r\n      };\r\n\r\n      const response = ServerAddCall(1000);\r\n      response.then(() => {\r\n        // this.state.data.push(newRow);\r\n        // this.setState(this.state.data);\r\n\r\n\r\n        console.log(newData);\r\n        this.setState({ data: newData });\r\n      });\r\n    // } else {\r\n    //   console.log('need save');\r\n    // }\r\n  };\r\n\r\n  handleRowDelEvent = item => {\r\n    const index = this.state.data.indexOf(item);\r\n    let newData = this.state.data.splice();\r\n    console.log(newData, index);\r\n    // if (!this.state.touched) {\r\n      const ServerDelCall = ms => {\r\n        return new Promise(resolve => {\r\n          setTimeout(() => {\r\n            newData = newData.splice(index, 1);\r\n\t\t\t  console.log(newData, index);\r\n            resolve('200');\r\n          }, ms);\r\n        });\r\n      };\r\n\r\n      const response = ServerDelCall(1000);\r\n      response.then(() => {\r\n        this.state.data.splice(index, 1);\r\n        this.setState(newData);\r\n        // this.setState(newData);\r\n      });\r\n    // } else {\r\n    //   console.log('need save');\r\n    // }\r\n  };\r\n  handleCellChangeEvent = (touched) => {\r\n  \t// this.setState({touched: touched})\r\n  }\r\n\r\n  handleSaveEvent = dataToSave => {\r\n    const ServerSaveCall = ms => {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve('200');\r\n        }, ms);\r\n      });\r\n    };\r\n\r\n    const response = ServerSaveCall(1000);\r\n    response\r\n      .then(() => {\r\n        this.setState({ data: dataToSave });\r\n      })\r\n      .then(() => {\r\n        this.setState({ touched: true });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const TableData = this.state.data;\r\n    const touched = this.state.touched;\r\n    console.log(this.state);\r\n    return (\r\n      <ItemsTable\r\n        data={TableData}\r\n        // addRowEvent={this.handleAddEvent}\r\n        // delEvent={this.handleRowDelEvent}\r\n        // saveEvent={this.handleSaveEvent}\r\n\t\t// cellChangeEvent={this.handleCellChangeEvent}\r\n        touched={touched}\r\n\t\tBgColor={\"#a9b1a9\"}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Data} from \"./config\";\nimport Demo from \"./demo\";\n\n\n\n\nReactDOM.render(<Demo/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}