{"version":3,"sources":["serviceWorker.js","drawButton.jsx","config.js","drawHeaders.jsx","drawInput.jsx","drawCell.jsx","drawRow.jsx","helpers.js","App.jsx","demo.jsx","index.js"],"names":["Boolean","window","location","hostname","match","DrawButton","SaveButton","styled","button","_templateObject","_this$props","this","props","onClick","value","react_default","a","createElement","React","Component","DefaultHeaders","Headers","DefaultData","id","Data","category","price","qty","name","Header","th","drawHeaders_templateObject","DrawHeaders","headers","map","index","key","Input","input","drawInput_templateObject","BgColor","idWidth","idAlign","DrawInput","handleInputEvent","event","_this","handleCellDataChangeEvent","type","onChange","disabled","DrawCell","drawInput_DrawInput","DrawRow","handleRowDelEvent","row","handleDataChange","_this2","react","Object","getOwnPropertyNames","drawCell_DrawCell","drawButton_DrawButton","getItemTemplate","dataArray","itemTemplate","length","Array","isArray","originItem","objectSpread","defineProperty","generateId","Math","floor","random","TableWrapper","div","App_templateObject","TableStyled","table","_templateObject2","Warning","_templateObject3","TableHead","thead","_templateObject4","ItemsTable","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleAddRowEvent","state","touched","addRowEvent","console","log","newData","data","newItem","newId","newRow","push","setState","item","parseInt","target","items","slice","forEach","i","edited","handleSave","saveEvent","delEvent","indexOf","splice","tableData","drawHeaders_DrawHeaders","drawRow_DrawRow","bind","style","display","Demo","handleAddEvent","ms","Promise","resolve","setTimeout","then","handleSaveEvent","dataToSave","assertThisInitialized","TableData","App","cellChangeEvent","handleCellChangeEvent","ReactDOM","render","demo_Demo","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,mmBChBeC,mLAGjB,IAAMC,EAAaC,IAAOC,OAAVC,KAFTC,EAoBoBC,KAAKC,MAAxBC,EApBDH,EAoBCG,QAASC,EApBVJ,EAoBUI,MAEf,OAAOC,EAAAC,EAAAC,cAACX,EAAD,CAAYO,QAASA,GAAWC,UAvBLI,IAAMC,WCFjCC,EAAiB,CAAC,KAAO,WAAY,QAAS,MAAO,QACrDC,EAAU,CAAC,OAAS,WAAY,QAAS,MAAO,QAChDC,EAAc,CAAC,CAC3BC,GAAI,YAEQC,EAAO,CACnB,CACCD,GAAI,EACJE,SAAU,iBACVC,MAAO,QACPC,IAAK,KACLC,KAAM,YAEP,CACCL,GAAI,EACJE,SAAU,iBACVC,MAAO,OACPC,IAAK,KACLC,KAAM,YAEP,CACCL,GAAI,EACJE,SAAU,iBACVC,MAAO,QACPC,IAAK,KACLC,KAAM,cAGP,CACCL,GAAI,EACJE,SAAU,cACVC,MAAO,QACPC,IAAK,KACLC,KAAM,cAEP,CACCL,GAAI,EACJE,SAAU,cACVC,MAAO,SACPC,IAAK,KACLC,KAAM,YAEP,CACCL,GAAI,EACJE,SAAU,cACVC,MAAO,SACPC,IAAK,KACLC,KAAM,+GCzCR,IAAMC,EAAStB,IAAOuB,GAAVC,KAMSC,mLAKnB,OAFgBrB,KAAKC,MAAMqB,QAAUtB,KAAKC,MAAMqB,QAAUb,GAC9Bc,IAAI,SAACN,EAAMO,GAAP,OAAiBpB,EAAAC,EAAAC,cAACY,EAAD,CAAQO,IAAKD,GAAQP,YAJ/BV,IAAMC,4OCT/C,IAAMkB,EAAQ9B,IAAO+B,MAAVC,IAII,SAAA3B,GAAK,OAAKA,EAAM4B,QAAU5B,EAAM4B,QAAU,SAC/C,SAAA5B,GAAK,OAAIA,EAAM6B,SAEV,SAAA7B,GAAK,OAAIA,EAAM8B,UAITC,6MACnBC,iBAAmB,SAAAC,GACjBC,EAAKlC,MAAMmC,0BAA0BF,4EAE9B,IAAAnC,EACoCC,KAAKC,MAAxCW,EADDb,EACCa,GAAIK,EADLlB,EACKkB,KAAMoB,EADXtC,EACWsC,KAAMlC,EADjBJ,EACiBI,MAAO0B,EADxB9B,EACwB8B,QAE/B,OACEzB,EAAAC,EAAAC,cAACoB,EAAD,CACEW,KAAMA,EACNzB,GAAIA,EACJK,KAAMA,EACNd,MAAOA,EACPmC,SAAUtC,KAAKiC,iBAEfM,SAAmB,OAATtB,EAAgB,WAAa,KACvCY,QAAkB,OAATZ,EAAgB,UAAYY,EACrCC,QAAkB,OAATb,EAAgB,OAAS,QACxCc,QAAkB,OAATd,EAAgB,SAAW,gBAlBCV,IAAMC,WCXxBgC,mLACV,IAAAzC,EAIuDC,KAAKC,MAA5DmC,EAJArC,EAIAqC,0BAA2BxB,EAJ3Bb,EAI2Ba,GAAIK,EAJ/BlB,EAI+BkB,KAAMd,EAJrCJ,EAIqCI,MAAO0B,EAJ5C9B,EAI4C8B,QACnD,OACEzB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACmC,EAAD,CACEJ,KAAM,OACNzB,GAAIA,EACJK,KAAMA,EACNd,MAAOA,EACbiC,0BAA2BA,EAC3BP,QAASA,YAdyBtB,IAAMC,WCEvBkC,6MACpBC,kBAAoB,WACnBR,EAAKlC,MAAM0C,kBAAkBR,EAAKlC,MAAM2C,QAIzCC,iBAAmB,SAAAX,GAClBC,EAAKlC,MAAMmC,0BAA0BF,4EAE7B,IAAAY,EAAA9C,KACF4C,EAAM5C,KAAKC,MAAM2C,IACjBf,EAAU7B,KAAKC,MAAM4B,QAE3B,OACCzB,EAAAC,EAAAC,cAACyC,EAAA,SAAD,KACC3C,EAAAC,EAAAC,cAAA,UACE0C,OAAOC,oBAAoBL,GAAKrB,IAAI,SAACE,EAAKD,GAAN,OACpCpB,EAAAC,EAAAC,cAAC4C,EAAD,CACCtC,GAAIgC,EAAIhC,GACRK,KAAMQ,EACNtB,MAAOyC,EAAInB,GACXA,IAAKD,EACLY,0BAA2BU,EAAKD,iBAChChB,QAASA,MAGXzB,EAAAC,EAAAC,cAAA,UACCF,EAAAC,EAAAC,cAAC6C,EAAD,CAAYjD,QAASF,KAAK2C,kBAAmBxC,MAAM,gBA3BpBI,IAAMC,mBCFpC,SAAS4C,EAAgBC,GAE9B,IAAIC,EAAe,GACnB,GAAID,EAAUE,OAAS,GAAKC,MAAMC,QAAQJ,GAAY,CACrD,IAAMK,EAAaL,EAAU,GAE7B,IAAK,IAAI5B,KAAOiC,EACfJ,EAAYN,OAAAW,EAAA,EAAAX,CAAA,GACRM,EADQN,OAAAY,EAAA,EAAAZ,CAAA,GAEVvB,EAAM,KAIV,OAAO6B,EAKF,SAASO,IACf,OAAOC,KAAKC,MAAsB,OAAhBD,KAAKE,6uBCbxB,IAAMC,EAAerE,IAAOsE,IAAVC,IACA,SAAAlE,GAAK,OAAKA,EAAM4B,QAAU,UAMtCuC,EAAcxE,IAAOyE,MAAVC,IAKD,SAAArE,GAAK,OAAKA,EAAM4B,QAAU5B,EAAM4B,QAAU,UAKpD0C,EAAU3E,IAAOsE,IAAVM,KAMPC,EAAY7E,IAAO8E,MAAVC,KAyHAC,cAnHb,SAAAA,EAAY3E,GAAO,IAAAkC,EAAA,OAAAa,OAAA6B,EAAA,EAAA7B,CAAAhD,KAAA4E,IACjBzC,EAAAa,OAAA8B,EAAA,EAAA9B,CAAAhD,KAAAgD,OAAA+B,EAAA,EAAA/B,CAAA4B,GAAAI,KAAAhF,KAAMC,KAQRgF,kBAAoB,WAClB,IAAK9C,EAAK+C,MAAMC,SAAWhD,EAAKlC,MAAMmF,YACpCjD,EAAKlC,MAAMmF,mBACN,GAAKjD,EAAK+C,MAAMC,QAWhBE,QAAQC,IAAI,iBAXa,CAC9B,IAAIC,EAAUpD,EAAK+C,MAAMM,KACnBC,EAAUrC,EAAgBjB,EAAK+C,MAAMM,MACzCE,EAAQ7B,IACR8B,EAAM3C,OAAAW,EAAA,EAAAX,CAAA,GACDyC,EADC,CAEJ7E,GAAI8E,IAERvD,EAAK+C,MAAMM,KAAKI,KAAKD,GAErBxD,EAAK0D,SAAS,CAAEL,KAAMD,MAtBPpD,EAqCnBC,0BAA4B,SAAAF,GAC1B,IAAI4D,EAAO,CACTlF,GAAImF,SAAS7D,EAAM8D,OAAOpF,IAC1BK,KAAMiB,EAAM8D,OAAO/E,KACnBd,MAAO+B,EAAM8D,OAAO7F,OAElB8F,EAAQ9D,EAAK+C,MAAMM,KAAKU,QAE5BD,EAAME,QAAQ,SAAAC,GACZ,IAAK,IAAI3E,KAAO2E,EACV3E,IAAQqE,EAAK7E,MAAQmF,EAAExF,KAAOkF,EAAKlF,KACrCwF,EAAE3E,GAAOqE,EAAK3F,SAKpBgC,EAAK0D,SAAS,CAAEQ,OAAQJ,IAEnB9D,EAAK+C,MAAMC,SACdhD,EAAK0D,SAAS,CAAEV,SAAS,KAxDVhD,EA2DnBmE,WAAa,WACXnE,EAAK0D,SAAS,CAAEL,KAAMrD,EAAK+C,MAAMmB,SACjClE,EAAK0D,SAAS,CAAEV,SAAS,IACrBhD,EAAKlC,MAAMsG,WACbpE,EAAKlC,MAAMsG,UAAUpE,EAAK+C,MAAMmB,SA5DlClE,EAAK+C,MAAQ,GAEb/C,EAAK+C,MAAMM,KAAOrD,EAAKlC,MAAMuF,KAC7BrD,EAAK+C,MAAMC,QAAUhD,EAAKlC,MAAMkF,QANfhD,iFA0BD2D,GAChB,IAAK9F,KAAKkF,MAAMC,SAAWnF,KAAKC,MAAMuG,SACpCxG,KAAKC,MAAMuG,SAASV,QACf,GAAK9F,KAAKkF,MAAMC,QAMhBE,QAAQC,IAAI,iBANa,CAC9B,IAAM9D,EAAQxB,KAAKkF,MAAMM,KAAKiB,QAAQX,GAEtC9F,KAAKkF,MAAMM,KAAKkB,OAAOlF,EAAO,GAE9BxB,KAAK6F,SAAS,CAAEL,KAAMxF,KAAKkF,MAAMM,yCAgC5B,IAAA1C,EAAA9C,KACD2G,EAAY3G,KAAKkF,MAAMM,KAAOxF,KAAKkF,MAAMM,KAAO7E,EAChDwE,EAAUnF,KAAKkF,MAAMC,QACrBtD,EAAU7B,KAAKC,MAAM4B,QAE3B,OACEzB,EAAAC,EAAAC,cAACyC,EAAA,SAAD,KACE3C,EAAAC,EAAAC,cAAC2D,EAAD,CAAcpC,QAASA,GACrBzB,EAAAC,EAAAC,cAAC8D,EAAD,CAAavC,QAASA,GACpBzB,EAAAC,EAAAC,cAACmE,EAAD,KACErE,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACsG,EAAD,CAAatF,QAAStB,KAAKC,MAAMqB,YAIrClB,EAAAC,EAAAC,cAAA,aACGqG,EAAUpF,IAAI,SAACuE,EAAMtE,GAAP,OACbpB,EAAAC,EAAAC,cAACuG,EAAD,CACEjE,IAAKkD,EACLrE,IAAKD,EACLmB,kBAAmBG,EAAKH,kBAAkBmE,KAAKhE,GAC/CV,0BAA2BU,EAAKV,0BAA0B0E,KACxDhE,GAEFjB,QAASA,QAMjBzB,EAAAC,EAAAC,cAAC6C,EAAD,CACEjD,QAASF,KAAKiF,kBAAkB6B,KAAK9G,MACrCG,MAAM,YAERC,EAAAC,EAAAC,cAACiE,EAAD,CACEwC,MAAO,CACLC,QAAS7B,EAAU,OAAS,SAFhC,2EAOE/E,EAAAC,EAAAC,cAAC6C,EAAD,CAAYjD,QAASF,KAAKsG,WAAYnG,MAAM,mBA5G/BK,aChCJyG,cACnB,SAAAA,EAAYhH,GAAO,IAAAkC,EAAA,OAAAa,OAAA6B,EAAA,EAAA7B,CAAAhD,KAAAiH,IACjB9E,EAAAa,OAAA8B,EAAA,EAAA9B,CAAAhD,KAAAgD,OAAA+B,EAAA,EAAA/B,CAAAiE,GAAAjC,KAAAhF,KAAMC,KASRiH,eAAiB,WACf,IAAIzB,EAASC,EAAOC,EAGEwB,EAFlB5B,EAAUpD,EAAK+C,MAAMM,MAEH2B,EAeS,IAdtB,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACT7B,EAAUrC,EAAgBvC,GAC1B6E,EAAQ7B,IACR8B,EAAM3C,OAAAW,EAAA,EAAAX,CAAA,GACDyC,EADC,CAEJ7E,GAAI8E,IAENH,EAAQK,KAAKD,GACb0B,EAAQ,QACPF,MAKEI,KAAK,WAEZpF,EAAK0D,SAAS,CAAEL,KAAMD,IAC1BF,QAAQC,IAAI,6BAjCOnD,EAqCnBQ,kBAAoB,SAAAmD,GAClB,IAGsBqB,EAHhB3F,EAAQW,EAAK+C,MAAMM,KAAKiB,QAAQX,GAClCP,EAAUpD,EAAK+C,MAAMM,KAAKkB,UAERS,EAUS,IATtB,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACT/B,EAAUA,EAAQmB,OAAOlF,EAAO,GAEhC6F,EAAQ,QACPF,MAKEI,KAAK,WACZpF,EAAK+C,MAAMM,KAAKkB,OAAOlF,EAAO,GAC9BW,EAAK0D,SAASN,GACdF,QAAQC,IAAI,+BAvDGnD,EA4DnBqF,gBAAkB,SAAAC,GAChB,IAAuBN,KAQS,IAPvB,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTD,EAAQ,QACPF,MAMJI,KAAK,WACJpF,EAAK0D,SAAS,CAAEL,KAAMiC,MAEvBF,KAAK,WACJpF,EAAK0D,SAAS,CAAEV,SAAS,IAC7BE,QAAQC,IAAI,8BAzEZnD,EAAK+C,MAAQ,GAEb/C,EAAK+C,MAAMM,KAAO3E,EAClBsB,EAAK+C,MAAMC,SAAU,EACrBhD,EAAK+E,eAAiB/E,EAAK+E,eAAeJ,KAApB9D,OAAA0E,EAAA,EAAA1E,QAAA0E,EAAA,EAAA1E,CAAAb,KAPLA,wEAiFjB,IAAMwF,EAAY3H,KAAKkF,MAAMM,KACvBL,EAAUnF,KAAKkF,MAAMC,QAE3B,OACE/E,EAAAC,EAAAC,cAACsH,EAAD,CACEpC,KAAMmC,EACNrG,QAASZ,EACT0E,YAAapF,KAAKkH,eAClBV,SAAUxG,KAAK2C,kBACf4D,UAAWvG,KAAKwH,gBAChBK,gBAAiB7H,KAAK8H,sBACtB3C,QAASA,EACTtD,QAAS,mBA9FiBtB,IAAMC,WCMxCuH,IAASC,OAAO5H,EAAAC,EAAAC,cAAC2H,EAAD,MAASC,SAASC,eAAe,SVkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,KAAK,SAAAgB,GACjCA,EAAaC","file":"static/js/main.56db6bb7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nexport default class DrawButton extends React.Component {\r\n  render() {\r\n\r\n    const SaveButton = styled.button`\r\n   \r\n      \r\n    \r\n  display: inline-block;\r\n  font-size: 100%;\r\n  font-weight: 700;\r\n  color: #fff;\r\n  text-shadow: #053852 -1px 1px, #053852 1px 1px, #053852 1px -1px, #053852 -1px -1px;\r\n  text-decoration: none;\r\n  user-select: none;\r\n  padding: 5px;\r\n  \r\n  background: #053852 repeating-linear-gradient(135deg, #053852, #053852 10px, #1679ad 10px, #1679ad 20px, #053852 20px);\r\n  cursor: pointer;\r\n  \r\n    `;\r\n\r\n    const { onClick, value } = this.props;\r\n\r\n      return <SaveButton onClick={onClick} >{value}</SaveButton>;\r\n  }\r\n}\r\n","export const DefaultHeaders = ['ID',  'category', 'price', 'qty', 'Name'];\r\nexport const Headers = ['ID`s',  'category', 'price', 'qty', 'Name'];\r\nexport const DefaultData = [{\r\n\tid: 'no data'\r\n}];\r\nexport const Data = [\r\n\t{\r\n\t\tid: 1,\r\n\t\tcategory: 'Sporting Goods',\r\n\t\tprice: '49.99',\r\n\t\tqty: '12',\r\n\t\tname: 'football',\r\n\t},\r\n\t{\r\n\t\tid: 2,\r\n\t\tcategory: 'Sporting Goods',\r\n\t\tprice: '9.99',\r\n\t\tqty: '15',\r\n\t\tname: 'baseball',\r\n\t},\r\n\t{\r\n\t\tid: 3,\r\n\t\tcategory: 'Sporting Goods',\r\n\t\tprice: '29.99',\r\n\t\tqty: '14',\r\n\t\tname: 'basketball'\r\n\r\n\t},\r\n\t{\r\n\t\tid: 4,\r\n\t\tcategory: 'Electronics',\r\n\t\tprice: '99.99',\r\n\t\tqty: '34',\r\n\t\tname: 'iPod Touch',\r\n\t},\r\n\t{\r\n\t\tid: 5,\r\n\t\tcategory: 'Electronics',\r\n\t\tprice: '399.99',\r\n\t\tqty: '12',\r\n\t\tname: 'iPhone 5',\r\n\t},\r\n\t{\r\n\t\tid: 6,\r\n\t\tcategory: 'Electronics',\r\n\t\tprice: '199.99',\r\n\t\tqty: '23',\r\n\t\tname: 'nexus 7',\r\n\t},\r\n];\r\n","//Headers\r\nimport {DefaultHeaders} from \"./config\";\r\nimport React from \"react\";\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Header = styled.th`\r\ntext-transform: uppercase;\r\n`\r\n\r\n;\r\n\r\nexport default class DrawHeaders extends React.Component {\r\n\r\n\trender() {\r\n\t\tconst Headers = this.props.headers ? this.props.headers : DefaultHeaders;\r\n\t\tconst headersList = Headers.map((name, index) => <Header key={index}>{name}</Header>);\r\n\t\treturn (headersList)\r\n\t}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Input = styled.input`\r\nborder-style: solid;\r\n    border-width: 0 0 1px 0;\r\n    border-color: white;\r\n\tbackground: ${props => (props.BgColor ? props.BgColor : 'white')};\r\n\twidth: ${props => props.idWidth}\r\n\toutline: none;\r\n\ttext-align: ${props => props.idAlign};\r\n\t\r\n`;\r\n\r\nexport default class DrawInput extends React.Component {\r\n  handleInputEvent = event => {\r\n    this.props.handleCellDataChangeEvent(event);\r\n  };\r\n  render() {\r\n    const { id, name, type, value, BgColor } = this.props;\r\n\r\n    return (\r\n      <Input\r\n        type={type}\r\n        id={id}\r\n        name={name}\r\n        value={value}\r\n        onChange={this.handleInputEvent}\r\n        // readOnly={name === 'id'? \"readonly\" : null }\r\n        disabled={name === \"id\" ? \"readonly\" : null}\r\n        BgColor={name === \"id\" ? \"#AFCDE7\" : BgColor}\r\n        idWidth={name === \"id\" ? \"60px\" : \"unset\"}\r\n\t\tidAlign={name === \"id\" ? \"center\" : \"left\"}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport DrawInput from './drawInput';\r\n\r\nexport default class DrawCell extends React.Component {\r\n  render() {\r\n\r\n\r\n\r\n    const {handleCellDataChangeEvent, id, name, value, BgColor} = this.props;\r\n    return (\r\n      <td>\r\n        <DrawInput\r\n          type={'text'}\r\n          id={id}\r\n          name={name}\r\n          value={value}\r\n\t\t  handleCellDataChangeEvent={handleCellDataChangeEvent}\r\n\t\t  BgColor={BgColor}\r\n        />\r\n      </td>\r\n    );\r\n  }\r\n}\r\n","import React, {Fragment} from \"react\";\r\nimport DrawCell from \"./drawCell\";\r\nimport DrawButton from \"./drawButton\";\r\n\r\n\r\nexport default class DrawRow extends React.Component {\r\n\thandleRowDelEvent = () => {\r\n\t\tthis.props.handleRowDelEvent(this.props.row);\r\n\r\n\t};\r\n\r\n\thandleDataChange = event => {\r\n\t\tthis.props.handleCellDataChangeEvent(event);\r\n\t};\r\n\trender() {\r\n\t\tconst row = this.props.row;\r\n\t\tconst BgColor = this.props.BgColor\r\n\r\n\t\treturn (\r\n\t\t\t<Fragment>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t{Object.getOwnPropertyNames(row).map((key, index) => (\r\n\t\t\t\t\t\t<DrawCell\r\n\t\t\t\t\t\t\tid={row.id}\r\n\t\t\t\t\t\t\tname={key}\r\n\t\t\t\t\t\t\tvalue={row[key]}\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\thandleCellDataChangeEvent={this.handleDataChange}\r\n\t\t\t\t\t\t\tBgColor={BgColor}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))}\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<DrawButton onClick={this.handleRowDelEvent} value=\"X\" />\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n","import {Data} from \"./config\";\r\n\r\n\r\nexport function getItemTemplate(dataArray) {\r\n\r\n\t let itemTemplate = {};\r\n\t if (dataArray.length > 0 && Array.isArray(dataArray)) {\r\n\t\t const originItem = dataArray[0];\r\n\r\n\t\t for (let key in originItem) {\r\n\t\t\t itemTemplate = {\r\n\t\t\t\t ...itemTemplate,\r\n\t\t\t\t [key]: '',\r\n\t\t\t };\r\n\t\t }\r\n\t }\r\n\t return itemTemplate\r\n}\r\n\r\n\r\n\r\nexport function generateId() {\r\n\treturn Math.floor(Math.random() * 999999);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component, Fragment } from 'react';\r\n\r\nimport DrawButton from './drawButton';\r\nimport DrawHeaders from './drawHeaders';\r\nimport DrawRow from './drawRow';\r\nimport { generateId, getItemTemplate } from './helpers';\r\nimport {  DefaultData } from './config';\r\nimport styled from 'styled-components';\r\n\r\nconst TableWrapper = styled.div`\r\n    background: ${props => (props.BgColor ? 'white' : 'white')};\r\n    border: 1px solid\r\n    text-align: -webkit-center;\r\n    padding: 20px;\r\n    `;\r\n\r\nconst TableStyled = styled.table`\r\n  font-family: 'Lucida Sans Unicode', 'Lucida Grande', Sans-Serif;\r\n  text-align: left;\r\n  border-collapse: separate;\r\n  border-spacing: 5px;\r\n  background: ${props => (props.BgColor ? props.BgColor : 'white')};\r\n  color: #656665;\r\n  // border: 16px solid #ECE9E0;\r\n  // border-radius: 20px;\r\n`;\r\nconst Warning = styled.div`\r\n  color: red;\r\n  flex-direction: column;\r\n  width: 30%;\r\n`;\r\n\r\nconst TableHead = styled.thead`\r\n  // background: papayawhip;\r\n  text-align: center;\r\n`;\r\n\r\nclass ItemsTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n    this.state.data = this.props.data;\r\n    this.state.touched = this.props.touched;\r\n  }\r\n\r\n  handleAddRowEvent = () => {\r\n    if (!this.state.touched && this.props.addRowEvent) {\r\n      this.props.addRowEvent();\r\n    } else if (!this.state.touched) {\r\n      let newData = this.state.data;\r\n      const newItem = getItemTemplate(this.state.data),\r\n        newId = generateId(),\r\n        newRow = {\r\n          ...newItem,\r\n          id: newId,\r\n        };\r\n      this.state.data.push(newRow);\r\n\r\n      this.setState({ data: newData });\r\n    } else console.log('need save');\r\n  };\r\n\r\n  handleRowDelEvent(item) {\r\n    if (!this.state.touched && this.props.delEvent) {\r\n      this.props.delEvent(item);\r\n    } else if (!this.state.touched) {\r\n      const index = this.state.data.indexOf(item);\r\n\r\n      this.state.data.splice(index, 1);\r\n\r\n      this.setState({ data: this.state.data });\r\n    } else console.log('need save');\r\n  }\r\n  handleCellDataChangeEvent = event => {\r\n    let item = {\r\n      id: parseInt(event.target.id),\r\n      name: event.target.name,\r\n      value: event.target.value,\r\n    };\r\n    let items = this.state.data.slice();\r\n\r\n    items.forEach(i => {\r\n      for (let key in i) {\r\n        if (key === item.name && i.id === item.id) {\r\n          i[key] = item.value;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.setState({ edited: items });\r\n\r\n    if (!this.state.touched) {\r\n      this.setState({ touched: true });\r\n    }\r\n  };\r\n  handleSave = () => {\r\n    this.setState({ data: this.state.edited });\r\n    this.setState({ touched: false });\r\n    if (this.props.saveEvent) {\r\n      this.props.saveEvent(this.state.edited);\r\n    }\r\n  };\r\n  render() {\r\n    const tableData = this.state.data ? this.state.data : DefaultData;\r\n    const touched = this.state.touched;\r\n    const BgColor = this.props.BgColor;\r\n\r\n    return (\r\n      <Fragment>\r\n        <TableWrapper BgColor={BgColor}>\r\n          <TableStyled BgColor={BgColor}>\r\n            <TableHead>\r\n              <tr>\r\n                <DrawHeaders headers={this.props.headers} />\r\n              </tr>\r\n            </TableHead>\r\n\r\n            <tbody>\r\n              {tableData.map((item, index) => (\r\n                <DrawRow\r\n                  row={item}\r\n                  key={index}\r\n                  handleRowDelEvent={this.handleRowDelEvent.bind(this)}\r\n                  handleCellDataChangeEvent={this.handleCellDataChangeEvent.bind(\r\n                    this,\r\n                  )}\r\n                  BgColor={BgColor}\r\n                />\r\n              ))}\r\n            </tbody>\r\n          </TableStyled>\r\n\r\n          <DrawButton\r\n            onClick={this.handleAddRowEvent.bind(this)}\r\n            value=\"ADD ROW\"\r\n          />\r\n          <Warning\r\n            style={{\r\n              display: touched ? 'flex' : 'none',\r\n            }}\r\n          >\r\n            Unsaved data in cells. Please save progress before adding/removing\r\n            rows!\r\n            <DrawButton onClick={this.handleSave} value=\"SAVE\" />\r\n          </Warning>\r\n        </TableWrapper>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ItemsTable;\r\n","import React from 'react';\r\nimport ItemsTable from './App';\r\nimport { Data, Headers } from './config';\r\nimport { generateId, getItemTemplate } from './helpers';\r\n\r\nexport default class Demo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n\r\n    this.state.data = Data;\r\n    this.state.touched = false;\r\n    this.handleAddEvent = this.handleAddEvent.bind(this);\r\n  }\r\n\r\n  handleAddEvent = () => {\r\n    let newItem, newId, newRow;\r\n    let newData = this.state.data;\r\n\r\n    const ServerAddCall = ms => {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          newItem = getItemTemplate(Data);\r\n          newId = generateId();\r\n          newRow = {\r\n            ...newItem,\r\n            id: newId,\r\n          };\r\n          newData.push(newRow);\r\n          resolve('200');\r\n        }, ms);\r\n      });\r\n    };\r\n\r\n    const response = ServerAddCall(1000);\r\n    response.then(() => {\r\n\r\n      this.setState({ data: newData });\r\n\t\tconsole.log(\"status 200 - Row Added\")\r\n    });\r\n  };\r\n\r\n  handleRowDelEvent = item => {\r\n    const index = this.state.data.indexOf(item);\r\n    let newData = this.state.data.splice();\r\n\r\n    const ServerDelCall = ms => {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          newData = newData.splice(index, 1);\r\n\r\n          resolve('200');\r\n        }, ms);\r\n      });\r\n    };\r\n\r\n    const response = ServerDelCall(1000);\r\n    response.then(() => {\r\n      this.state.data.splice(index, 1);\r\n      this.setState(newData);\r\n      console.log(\"status 200 - Row Deleted\")\r\n    });\r\n  };\r\n\r\n\r\n  handleSaveEvent = dataToSave => {\r\n    const ServerSaveCall = ms => {\r\n      return new Promise(resolve => {\r\n        setTimeout(() => {\r\n          resolve('200');\r\n        }, ms);\r\n      });\r\n    };\r\n\r\n    const response = ServerSaveCall(1000);\r\n    response\r\n      .then(() => {\r\n        this.setState({ data: dataToSave });\r\n      })\r\n      .then(() => {\r\n        this.setState({ touched: true });\r\n\t\t  console.log(\"status 200 - Data Saved\")\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const TableData = this.state.data;\r\n    const touched = this.state.touched;\r\n\r\n    return (\r\n      <ItemsTable\r\n        data={TableData}\r\n        headers={Headers}\r\n        addRowEvent={this.handleAddEvent}\r\n        delEvent={this.handleRowDelEvent}\r\n        saveEvent={this.handleSaveEvent}\r\n        cellChangeEvent={this.handleCellChangeEvent}\r\n        touched={touched}\r\n        BgColor={\"#D8E6F3\"}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport Demo from \"./demo\";\r\n\r\n\r\n\r\n\r\nReactDOM.render(<Demo/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}